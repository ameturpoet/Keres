/********************************************************
*
*File:      LevelMiniMap
*Author:    Alex DeJardin
*Description:
    Functionality for an in-game map that actively 
    tracks the player's location
    
*Other Contributors:
    
********************************************************/
class LevelMiniMap : ZilchComponent
{
    [Property]
    var MaptoWorldScale : Real = 7.15;
    [Property]
    var MasterMap : Boolean = false;
    
    var PlayerBlip : Cog = null;
    var Player : Cog = null;
    var MiniAnchor : Cog = null;
    var OtherMaps : Array[Cog] = null;
    
    function Initialize(init : CogInitializer)
    {
        this.PlayerBlip = this.Owner.FindChildByName("PLAYERMARKER");
        //Only connects events if this is the master map to avoid
        //making multiple identical calculations
        if (this.MasterMap)
        {
            Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
            this.Player = this.Owner.Space.FindObjectByName("Player");
            this.MiniAnchor = this.Owner.FindChildByName("MiniMapAnchor");
            this.Owner.Name = "MASTERMAP";
            this.OtherMaps = new Array[Cog]();
            
            var maps = this.Owner.Space.FindAllObjectsByName("LEVELMAP");
            foreach (var map in maps)
            {
                this.OtherMaps.Add(map);
            }
        }
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        //Gets the player's location and converts it to the scale
        //of the map
        var playerLocation = this.Player.Transform.Translation;
        playerLocation /= this.MaptoWorldScale;
        playerLocation += this.MiniAnchor.Transform.Translation;
        
        this.PlayerBlip.Transform.Translation = playerLocation;
        
        //Updates every other map in the level
        foreach (var map in this.OtherMaps)
        {
            map.LevelMiniMap.UpdateBlipLocation(playerLocation);
        }
    }
    
    function UpdateBlipLocation(blipLoc : Real3)
    {
        this.PlayerBlip.Transform.Translation = blipLoc;
    }
}
