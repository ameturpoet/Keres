HOW TO MAKE A NEW LEVEL

Note: All Archetypes you need to spawn in are tagged with the 'LevelDesign' tag for convenience
Note 2: There's totally a template level that you don't need to do aaaaaaaany of this for. Just sayin'.

---
1. Player & Camera
---
    1: Drag the Player archetype into the level
    2: In the objects list (lower-right corner), click and drag the Camera onto the Player, this parents the Camera to the Player
    3: Set the Camera's Translation to (0, 0, 0) and its Rotation to (90, 0, 0)
    4: On the Camera's Camera script, set the ProjectionMode to 'Perspective', and its NearPlane to 0.0001
    5: In the objects list (lower-right corner again), there should be an object called 'Taser' attached to the Player. Click and drag the Taser onto the Camera.
       This attached the Taser to the Camera.
    6: Drag the PlayerInventory archetype into the level
    7: Move the PlayerInventory to an area that will never be seen, like directly beneath the floor
    
---
2. Level Generating Objects
---
    1: In the objects list, select the LevelSettings object. Attach the 'LoadHUD' script to it.
    2: In the LevelSettings' LoadHUD script, set the HUDLevel property to 'HUDLevel'
    3: In the LevelSettings' DragEffect script, set Active to False
    4: In the LevelSettings' GravyEffect script, set Active to False
    5: Delete the ForwardRenderer attached to the LevelSettings and attach DeferredRenderer, set the properties Glow and AntiAliasing to True
    6: Attach the Level_SetMouseState script to the LevelSettings object and set MouseState to Trapped
    7: Drag the Level_Generator archetype anywhere into the level. The LevelGenerator initializes all level generation events, ensuring that the geometry and
       pathing grid work properly
    8: Drag the LevelGeometry archetype anywhere into the level and set its Translation to (0, 0, 0). The LevelGeometry can be used to make the entire level
       shake, move, or rotate if we need to.

---
3. Tilemaps and Level Generation
---

    1: Select the TileEditor2D tool and create a new TileMap.
    2: Select the LevelDesignPallette* and use it to design the level. The tiles themselves spawn in the level geometry
        +Light gray sections indicate floor and ceiling
        +Dark gray sections are blank space
        +Purple lines are walls
    3: Click CreateTileMap to create another tile map for the material painting, rename it MaterialMap or something different to differentiate it from the first TileMap
    4: Select the TextureMapPallette* and paint over the locations of all tiles on the first TileMap. The tiles in the TextureMapPallette spawn in objects that paint the
       level with different textures. The textures to be painted should match the icon on the MaterialMap
    5: Set the MaterialMap's Translation to (0, 0, 1). This seperates it from the TileMap and makes it look better in the editor

---
4. Planets and Decorations
---
    1: Drag the Skybox into the level and set its Translation to (0, 0, 0)
       Can be resized to achieve desired effect
    2: Drag the planet** Pluto into the level and position wherever looks best
    3: Drag the Pluto_Lighting archetype into the level and position near Pluto for the best effect
    4: Drag the planet_Sun archetype*** into the level and position it for best effect, typically on the opposite end of the level from Pluto

---
5. Interactables and File I/O
---
    By default, objects like doors and keys will respawn every time the level starts. Because we're probably gonna have players be able to save mid-level and load later,
    we don't want this. However, the game is set up to save and load a Cog called 'LevelObjects' located in each level, so we want to have everything that will be saved
    (mostly just items, doors, and enemies) connected to the LevelObjects so that they're all saved and loaded at the right location. Doors will remain open and unlocked
    if they were opened or unlocked, and items will remain in the player's inventory and not appear on the ground. Glorious.

    1: If the level doesn't already have one, drag a copy of the LevelObjects archetype into the level
    2: Select the Parenting tool
    3: Set every thing you want saved (doors, items, enemies, etc) as a child of the LevelObjects cog in the level
    4: The game will now save and load the state of each thing accurately
    NOTE: If the game already has save data from that level and you add a new thing to it in the editor, the new thing will not appear.
          This is because the new thing does not exist in the save data that already existed. All you need to do is delete the old data and your new thing should
          appear.

*Yes, the word Palette is misspelled. Don't question it.

**Pluto is planet. Don't let those crazy scientists tell you otherwise

***I don't know why the archetype is called planet_Sun. I mean, I made it, but I really couldn't answer that question if you asked me.