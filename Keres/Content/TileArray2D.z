class TileArray2D : ZilchComponent
{
    var MinX : Real = 0;
    var MinY : Real = 0;
    var MaxX : Real = 0;
    var MaxY : Real = 0;
    var Width : Real = 0;
    var Height : Real = 0;
    var Count : Real = 0;
    
    var TileArray : Array[Cog] = null;
    
    function Initialize(init : CogInitializer)
    {
        this.TileArray = new Array[Cog]();
    }
    
    function ShiftIndex(index : Real, direction : Real2) : Real
    {
        var result = index;
        result += direction.X as Integer;
        result -= (direction.Y * this.Width) as Integer;
        
        return result;
    }

    //Initializes the list with 'empty' values
    //(The values are actually pointers to this script's owner)
    function InitializeEmptyList(allTiles : Array[Cog])
    {
        this.MaxY = allTiles.Get(0).Transform.Translation.Y;
        this.MinY = allTiles.Get(0).Transform.Translation.Y;
        this.MaxX = allTiles.Get(0).Transform.Translation.X;
        this.MinX = allTiles.Get(0).Transform.Translation.X;
        foreach (var tile in allTiles)
        {
            //Gets the sign of both the X and Y coordinates
            var temp = tile.Transform.WorldTranslation;
            
            //Check for X minimum and maximum
            if (temp.X < this.MinX)
            {
                this.MinX = temp.X;
            }
            else if (temp.X > this.MaxX)
            {
                this.MaxX = temp.X;
            }
            
            //Check for Y minimum and maximum
            if (temp.Y < this.MinY)
            {
                this.MinY = temp.Y;
            }
            else if (temp.Y > this.MaxY)
            {
                this.MaxY = temp.Y;
            }
        }
        
        //Derives width and height from min/max X and Y
        this.Width = this.MaxX - this.MinX + 1;
        this.Height = this.MaxY - this.MinY + 1;
        
        //Creates an empty array
        for (var i = 0; i < this.Width * this.Height; i += 1)
        {
            this.TileArray.Add(this.Owner);
        }
        
        this.Count = this.TileArray.Count;
    }
    
    function CoordToIndex(tileCoordinates : Real3, tile : Cog) : Real
    {
        var temp = tileCoordinates;
        temp.X -= this.MinX;
        
        temp.Y -= this.MaxY;
        temp.Y *= -1;
        
        tile.NavigationPoint.Index2D = Real2(temp.X, temp.Y);
        
        var index = temp.X + this.Width * temp.Y;
        
        return index;
    }
    
    function CoordToIndex(tileCoordinates : Real2, offset : Real3) : Real
    {
        var temp = tileCoordinates;
        
        temp.X += offset.X;
        temp.Y += offset.Y;
        
        var index = temp.X + this.Width * temp.Y;
        
        if (temp.X >= this.Width || temp.X < 0 || temp.Y < 0 || temp.Y >= this.Height)
        {
            index = -1;
        }
        
        return index;
    } 
    
    function GetTileAt(index2D: Real2, offset : Real3) : Cog
    {
        var offsetIndex = this.CoordToIndex(index2D, offset);
        
        if (offsetIndex < this.Count && offsetIndex != -1)
        {
            return this.TileArray.Get(offsetIndex as Integer);
        }
        else
        {
            return this.Owner;
        }
    }
    
    //Inserts each tiles in the input array into the 2D array based on its coordinates
    //E.g.:
    //Old: 
    //OOOO
    //OOOO
    //*Insert 2 tiles at (-1, 1) and (2, -1)
    //New: 
    //OXOO
    //OOOX
    function PopulateList(allTiles : Array[Cog])
    {
        foreach (var tile in allTiles)
        {
            //45-degree corner tiles are weird, so we have to check for them
            if (tile.Parent.Name != "Floor45")
            {
                var index = this.CoordToIndex(tile.Transform.WorldTranslation, tile);
                tile.NavigationPoint.Index = index;
                var integerIndex = index as Integer;
                
                if (integerIndex < this.Count)
                {
                    this.TileArray.Set(integerIndex, tile);
                }
            }
            else
            {
                var index = this.CoordToIndex(tile.Parent.Transform.WorldTranslation, tile);
                var integerIndex = index as Integer;
                tile.NavigationPoint.Index = index;
                
                if (integerIndex < this.Count)
                {
                    this.TileArray.Set(integerIndex, tile);
                }
            }
        }
        
        /*
        var counter = 0;
        foreach (var tile in this.TileArray)
        {
            if (counter >= this.Width)
            {
                Console.WriteLine("");
                counter = 0;
            }
            if (tile.Name == "LevelGeometry")
            {
                Console.Write(" ");
            }
            else if (tile.Name == "Floor")
            {
                Console.Write("X");
            }
            counter += 1;
        }*/
    }
}
