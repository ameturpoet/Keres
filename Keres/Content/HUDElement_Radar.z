/********************************************************
*
*File:      HUDElement_Radar
*Author:    Alex DeJardin
*Description:
    Functionality for the radar, checks distance against
    blip location to avoid having blips go outside of the
    radar area
    
*Other Contributors:
    
********************************************************/

class HUDElement_Radar : ZilchComponent
{
    [Property]
    var BlipArchetype : Archetype = null;
    [Property]
    var PingArchetype : Archetype = null;
    [Property]
    var RadarDistance : Real = 5.0;
    var HasNewBlip : Boolean = false;
    var MaxDistance : Real = 0.0;
    
    /*
    *
    * ***NOTE***
    *
    * All radar functions are called by the player, none of these should trigger on their own
    *
    */
    
    //Updates the locations of all blips based on the movement of the player
    //
    function UpdateBlips(deltaMovement : Real3)
    {
        var allBlips = this.Owner.FindAllChildrenByName("Blip");
        
        this.MaxDistance = this.Owner.Sprite.SpriteSource.GetSize().X / 128;
        
        //Loops through all blips
        foreach (var bl in allBlips)
        {
            //Translates the blip
            bl.Transform.Translation -= 0.8 * deltaMovement / this.RadarDistance;
            
            //If the blip if outside the area of the radar, it vanishes
            if (Math.Length(bl.Transform.Translation) > this.MaxDistance)
            {
                if (bl.Sprite.Visible)
                {
                    bl.Sprite.Visible = false;
                }
            }
            else
            {
                if (!bl.Sprite.Visible)
                {
                    bl.Sprite.Visible = true;
                }
            }
        }
    }

    //Adds a blip to the radar using the relative position from the player to the enemy
    //
    function AddBlip(relativePosition : Real3)
    {
        if (Math.Length(Real2(relativePosition.X, relativePosition.Y)) <= this.RadarDistance)
        {
            var blipLocation = (relativePosition / this.RadarDistance) * this.Owner.Sprite.SpriteSource.GetSize().X / 128;
            blipLocation.Z = 0.01;
            var newBlip = this.Owner.Space.CreateAtPosition(this.BlipArchetype, blipLocation);
            newBlip.AttachTo(this.Owner);
            this.HasNewBlip = true;
        }
    }
    
    function AddPing()
    {
        var ping = this.Owner.Space.CreateAtPosition(this.PingArchetype, Real3(0, 0, -0.01));
        ping.AttachTo(this.Owner);
        if (this.HasNewBlip)
        {
            this.HasNewBlip = false;
            this.Owner.SoundEmitter.Play();
        }
    }
    
    //Adds a permanent blip to the radar using the relative position from the player to the object
    //Used for stuff like doors that you want to always appear on the radar
    //
    function AddPermaBlip(relativePosition : Real3)
    {
        var blipLocation = (relativePosition / this.RadarDistance) * this.Owner.Sprite.SpriteSource.GetSize().X / 2;
        blipLocation.Z = 0.5;
        var newBlip = this.Owner.Space.CreateAtPosition(this.BlipArchetype, blipLocation);
        newBlip.RemoveComponentByName("Effect_FadeToDelete");
        newBlip.AttachTo(this.Owner);
    }
}
