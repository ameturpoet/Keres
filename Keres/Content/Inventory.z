/********************************************************
*
*File:      Inventory
*Author:    Alex DeJardin
*Description:
    Functionality for the player's inventory
    
*Other Contributors:
    
********************************************************/
class Inventory : ZilchComponent
{
    var InventoryObject : Cog = null;
    
    function Initialize(init : CogInitializer)
    {
        //Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }
    
    //Gets whether or not the player currently has an item whose name matches the input
    function HasItem(id : String): Boolean
    {
        var result = this.InventoryObject.FindChildByName(id);
        
        if (result != null)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    
    //Gets the Item name (not the ID) of the item with the given name
    function GetItemName(id : String): String
    {
        var result = this.InventoryObject.FindChildByName(id);
        
        if (result != null)
        {
            return result.Item.Name;
        }
        else
        {
            return null;
        }
    }
    
    //Gets a pointer to an item in the player's inventory by name
    function GetItemReference(id: String) : Cog
    {
        return this.InventoryObject.FindChildByName(id);
    }
    
    //Gets the number of items of a given name in the player's inventory
    function GetItemCount(id : String) : Integer
    {
        var items = this.InventoryObject.FindAllChildrenByName(id);
        var result = 0;
        
        foreach (var item in items)
        {
            result += 1;
        }
        
        return result;
        
    }
    
    //Adds a copy of an archetype to the player's inventory
    function AddItem(itemArchetype : Archetype)
    {
        var newItem = this.InventoryObject.Space.CreateAtPosition(itemArchetype, this.InventoryObject.Transform.Translation);
        newItem.AttachTo(this.InventoryObject);
    }
    
    //Adds an existing item in the level to the player's inventory
    function PickUpItem(item : Cog)
    {
        if (item.Item_Battery != null)
        {
            this.Owner.PlayerStats.Batteries += 1;
            item.Destroy();
        }
        else
        {
            item.Transform.Translation = this.InventoryObject.Transform.Translation;
            item.AttachTo(this.InventoryObject);
            if (item.Item_OxygenTank != null)
            {
                
            }
            else
            {
                this.Owner.PlayerControl_Move.ItemLog.HUDElement_TextLog.AddLineItem(item.Item.InventoryIcon, item.Item.Name, item.Name);
            }
        }
    }
    
    //Adds all items in the inventory to the HUD item log
    //Only used when loading existing save data
    function LoadItemIcons()
    {
        var items = this.InventoryObject.Children;
        foreach (var item in items)
        {
            if (item.Item_Key != null)
            {
                this.Owner.PlayerControl_Move.ItemLog.HUDElement_TextLog.AddLineItem(item.Item.InventoryIcon, item.Item.Name, item.Name);
            }
        }
    }
    
    //Deletes an item from the player's inventory by name
    function DeleteItem(id : String)
    {
        var result = this.InventoryObject.FindAllChildrenByName(id);
        var tempDid = false;
        
        foreach (var item in result)
        {
            if (!tempDid)
            {
                tempDid = true;
                item.Destroy();
            }
        }
    }
}
