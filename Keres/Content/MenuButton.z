class MenuButton : ZilchComponent
{
    [Property]
    var Target : String = null;
    //The target determines the function the menu button will perform
    [Property]
    var LoadTargetAsLevel : Boolean = false;
    //If LoadTargetAsLevel is true, the button will try to load a level whose name is the value of Target
    [Property]
    var Disabled : Boolean = false;
    
    var Highlighted : Boolean = false;
    var Clicked : Boolean = false;
    var GameSpace : Space = null;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Owner, Events.MouseEnter, this.OnMouseEnter);
        Zero.Connect(this.Owner, Events.MouseExit, this.OnMouseExit);
        Zero.Connect(this.Owner, Events.LeftMouseDown, this.OnMouseClick);
        Zero.Connect(this.Owner, Events.LeftMouseUp, this.OnMouseRelease);
        Zero.Connect(this.Space, "SpacesSet", this.SetTargetSpace);
        if (this.Target == "Play")
        {
            var fileManager = this.Owner.Space.FindObjectByName("FileManager");
            var level = fileManager.SaveManager.GetCurrentLevel();
            var text = this.Owner.Space.FindObjectByName("continueLevelText");
            
            var levelNames = ResourceTable.Find("LevelNamesTable");
            
            text.SpriteText.Text = levelNames.FindValue(level.Name);
            
            if (level.Name == this.Owner.Space.CurrentLevel.Name)
            {
                this.ToggleEnabled();
                this.SetCorrectSprite();
                text.SpriteText.Visible = false;
            }
        }
    }
    
    function SetTargetSpace(event : SetSpacePointerEvent)
    {
        this.GameSpace = event.GameSpace;
    }
    
    function ToggleEnabled()
    {
        this.Owner.Reactive.Active = !this.Owner.Reactive.Active;
        this.Disabled = !this.Disabled;
    }

    //Performs different functions based on the button's purpose
    function DoTarget()
    {
        if (this.LoadTargetAsLevel)
        {
            this.GameSpace.LoadLevel(Level.Find(this.Target));
        }
        else
        {
            if (this.Target == "Play")
            {
                this.PlayButton();
            }
            else if (this.Target == "Resume")
            {
                this.ResumeGame();
            }
            else if (this.Target == "Quit")
            {
                this.QuitButton();
            }
            else if (this.Target == "ToMenu")
            {
                this.QuitToMenuButton();
            }
            else if (this.Target == "NewGame")
            {
                this.NewGame();
            }
            else if (this.Target == "ClearData")
            {
                this.ClearData();
            }
            else if (this.Target == "DialogYes")
            {
                this.DialogButtonYes();
            }
            else if (this.Target == "DialogNo")
            {
                this.DialogButtonNo();
            }
            else if (this.Target == "Credits")
            {
                this.Credits();
            }
            else if (this.Target == "BacktoMenu")
            {
                this.BacktoMenu();
            }

        }
    }
    
    //Performs different function based on the button's purpose. Used for functions that require confirmation
    function DoConfirmedTarget(targetType : String)
    {
        if (this.LoadTargetAsLevel)
        {
            this.GameSpace.LoadLevel(Level.Find(this.Target));
        }
        else
        {
            Console.WriteLine(targetType);
            if (targetType == "Quit")
            {
                this.QuitButtonQuit();
            }
            else if (targetType == "NewGame")
            {
                this.NewGameDelete();
            }
            else if (targetType == "ToMenu")
            {
                this.QuitToMenuQuit();
            }
            else if (targetType == "ClearData")
            {
                this.ClearDataDelete();
            }
        }
    }
    
    function ResumeGame()
    {
        this.Owner.Parent.HUD_PauseScreen.CloseMenu();
    }
    
    //Begins playing the game
    function PlayButton()
    {
        var fileManager = this.Owner.Space.FindObjectByName("FileManager");
        var level = fileManager.SaveManager.GetCurrentLevel();
        
        if (level.Name != this.Owner.Space.CurrentLevel.Name)
        {
            this.GameSpace.LoadLevel(level);
        }
        else
        {
            this.GameSpace.LoadLevel(this.Owner.StartingLevel.StartingLevel);
        }
    }
    
    //Starts the camera's movement to the credits section of the menu
    function Credits()
    {
        var camera = this.Owner.Space.FindObjectByName("Camera");
        camera.MenuCameraScript.CurrentState = "Credits";
        camera.MenuCameraScript.MoveCounter = 0.0;
    }
    
    //Starts the camera's movement to the credits section of the menu
    function BacktoMenu()
    {
        var camera = this.Owner.Space.FindObjectByName("Camera");
        camera.MenuCameraScript.CurrentState = "Menu";
        camera.MenuCameraScript.MoveCounter = 1.0;
    }
    
    //Prompts the user to exit the game
    function QuitToMenuButton()
    {
        var sr = new StringBuilder();
        sr.WriteLine("Return to menu?");
        sr.WriteLine("Any unsaved progress will be lost.");
        this.ShowDialog(sr.ToString());
    }
    
    //Prompts the user to exit the game
    function QuitToMenuQuit()
    {
        this.Owner.Parent.HUD_PauseScreen.CloseMenu();
        this.GameSession.FindSpaceByName("HUDSpace").Destroy();
        this.GameSpace.LoadLevel(Level.Find("MainMenu"));
    }
    
    //Prompts the user to exit the game
    function QuitButton()
    {
        var sr = new StringBuilder();
        sr.WriteLine("Quit game?");
        this.ShowDialog(sr.ToString());
    }
    
    function QuitButtonQuit()
    {
        this.GameSession.Quit();
    }
    
    //Confirm's the user's choice on a dialog box
    function DialogButtonYes()
    {
        this.Owner.Parent.HUD_ConfirmDialogScript.Confirm();
    }
    
    //Cancel's the user's choice on a dialog box
    function DialogButtonNo()
    {
        this.Owner.Parent.HUD_ConfirmDialogScript.Cancel();
    }
    
    //Clears saved data
    function ClearData()
    {
        var sr = new StringBuilder();
        sr.WriteLine("Delete saved data?");
        sr.WriteLine("This cannot be reversed.");
        this.ShowDialog(sr.ToString());
        
    }
    
    function ClearDataDelete()
    {
        Zero.ObjectStore.ClearStore();
        this.GameSpace.LoadLevel(Level.Find("MainMenu"));
    }
    
    //Starts a new game, clearing all saved data in the ObjectStore
    function NewGame()
    {
        var fileManager = this.Owner.Space.FindObjectByName("FileManager");
        var level = fileManager.SaveManager.GetCurrentLevel();
        
        if (level.Name == this.Owner.Space.CurrentLevel.Name)
        {
            this.GameSpace.LoadLevel(this.Owner.StartingLevel.StartingLevel);
        }
        else
        {
            var sr = new StringBuilder();
            sr.WriteLine("Starting a new game will delete all saved data.");
            sr.WriteLine("Delete saved data?");
            sr.WriteLine("This cannot be reversed.");
            this.ShowDialog(sr.ToString());
        }
    }
    
    function NewGameDelete()
    {
        Zero.ObjectStore.ClearStore();
        var fileManager = this.Owner.Space.FindObjectByName("FileManager");
        var level = fileManager.SaveManager.GetCurrentLevel();
        
        if (level.Name != this.Owner.Space.CurrentLevel.Name)
        {
            this.GameSpace.LoadLevel(level);
        }
        else
        {
            this.GameSpace.LoadLevel(this.Owner.StartingLevel.StartingLevel);
        }
    }
    
    //------------------------------------
    //PUT BUTTON FUNCTIONS ABOVE ONLY FOR CONVENIENCE
    //------------------------------------
    
    function ShowDialog(dialogText : String)
    {
        var confirmDialog = this.Owner.Space.FindObjectByName("ConfirmMenu");
        confirmDialog.HUD_ConfirmDialogScript.ToggleVisible();
        confirmDialog.HUD_ConfirmDialogScript.ParentObject = this.Owner;
        confirmDialog.HUD_ConfirmDialogScript.SetText(dialogText);
    }
    
    //Sets the correct sprite based on mouse input
    function SetCorrectSprite()
    {
        if (!this.Disabled)
        {
            if (this.Highlighted)
            {
                if (this.Clicked)
                {
                    this.Owner.Sprite.CurrentFrame = 2;
                }
                else
                {
                    this.Owner.Sprite.CurrentFrame = 1;
                }
            }
            else
            {
                this.Owner.Sprite.CurrentFrame = 0;
            }
        }
        else
        {
            this.Owner.Sprite.Color = Real4(0.3, 0.3, 0.3, 1.0);
        }
    }
    
    function OnMouseEnter(event : MouseEvent)
    {
        this.Highlighted = true;
        this.SetCorrectSprite();
    }
    
    function OnMouseExit(event : MouseEvent)
    {
        this.Highlighted = false;
        this.Clicked = false;
        this.SetCorrectSprite();
    }
    
    function OnMouseClick(event : MouseEvent)
    {
        if (this.Highlighted)
        {
            this.Clicked = true;
            this.SetCorrectSprite();
        }
    }
    
    function OnMouseRelease(event : MouseEvent)
    {
        if (this.Clicked && this.Highlighted)
        {
            this.Clicked = false;
            this.SetCorrectSprite();
            this.DoTarget();
        }
    }
}
