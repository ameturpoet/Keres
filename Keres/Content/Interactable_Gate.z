/********************************************************
*
*File:      Interactable_Gate
*Author:    Alex DeJardin
*Description:
    Contains functionality for doors
    
*Other Contributors:
    
********************************************************/
class Interactable_Gate : ZilchComponent
{
    [Dependency]
    var Interactable : Interactable = null;
    [Property]
    var PlayerCantOpen : Boolean = false;
    [Property]
    var Locked : Boolean = false;
    [Property]
    var Key : String = "";
    [Property]
    var OpenTime : Real = 1.0;
    var CurrentOpenTime : Real = 0.0;
    
    [Property]
    var State : Integer = 2;
    //4 states:
    //0-Open
    //1-Opening
    //2-Closed
    //3-Closing
    
    var SubParts : Array[Cog] = null;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.Update);
        this.SubParts = Array[Cog]();
        
        var children = this.Owner.FindAllChildrenByName("doorPiece");
        foreach (var child in children)
        {
            this.SubParts.Add(child);
        }
    }
    
    function Toggle()
    {
        if (this.State == 0 || this.State == 1)
        {
            this.State = 3;
            this.Owner.Soundbox_Door.PlayOpen();
        }
        else if (this.State == 2 || this.State == 3)
        {
            this.State = 1;
            this.Owner.Soundbox_Door.PlayOpen();
            if (this.Owner.Interactable_LoadGate != null)
            {
                this.Owner.Interactable_LoadGate.Enabled = true;
            }
        }
    }
    
    function UpdateSubObjects()
    {
        foreach (var pi in this.SubParts)
        {
            pi.GatePiece.SetOpenPosition(this.CurrentOpenTime / this.OpenTime);
        }
    }
    
    function SetOpen()
    {
        foreach (var pi in this.SubParts)
        {
            pi.GatePiece.SetToOpen();
        }
    }
    
    function SetClosed()
    {
        foreach (var pi in this.SubParts)
        {
            pi.GatePiece.SetToClosed();
        }
    }

    function Update(event : UpdateEvent)
    {
        if (this.State == 1)
        {
            this.CurrentOpenTime += event.Dt;
            if (this.CurrentOpenTime >= this.OpenTime)
            {
                this.State = 0;
                this.CurrentOpenTime = this.OpenTime;
                this.Owner.Soundbox_Door.PlayClose();
            }
            this.UpdateSubObjects();
        }
        else if (this.State == 3)
        {
            this.CurrentOpenTime -= event.Dt;
            if (this.CurrentOpenTime <= 0.0)
            {
                this.State = 2;
                this.CurrentOpenTime = 0.0;
                this.Owner.Soundbox_Door.PlayClose();
            }
            this.UpdateSubObjects();
        }
    }
}
